package com.lvmama.jiekou;

import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

public final class DBUtil {
	
	private static final String AUTO_COMMIT = "jdbc.connection.transaction.autocommit";
	private static final String TX_ISOLATION = "jdbc.connection.transaction.isolation" ;
	private static final String CONN_PREFIX = "jdbc.connection." ;
	private static final String DRIVER_SUFFIX = ".driver" ;
	private static final String URL_SUFFIX = ".url" ;
	private static final String USER_SUFFIX = ".username" ;
	private static final String PASSWD_SUFFIX = ".password" ;
	
	
	private static  String connect ;
	private static  String driverClassName ;
	private static  String URL ;
	private static  String username ;
	private static  String password ;
	private static  boolean autoCommit ;
	private static  int isolation ;
	
	/** 声明一个 Connection 类型的 静态属性，用来缓存一个 已经存在的 连接对象 */
	private static  Connection conn ;
	
	static {
		config(); // 调用静态方法
	}
	
	// 0、加载我们自己的 "配置文件"
	private static void config(){
		Properties props = new Properties();
		// 读取 指定 的 资源文件 (以 .properties 为结尾的 文件 即资源文件 )
		InputStream inStream = DBUtil.class.getResourceAsStream( "/db.properties" );
		try {
			// 将指定的 流 中的 内容 加载到 props 对象中
			props.load( inStream );
			
			// 根据 属性名 来获取 相应的内容 ( 属性值 )
			
			String ac = props.getProperty( AUTO_COMMIT );
			autoCommit = Boolean.valueOf( ac );
			String txiso = props.getProperty( TX_ISOLATION );
			try{
				isolation = Integer.parseInt( txiso );
			} catch (Exception e) {
				isolation = 2 ;
			}
			
			// 获得需要连接的数据库的名称
			connect = props.getProperty( "connect" );
			connect = connect.trim();
			
			// 获得驱动类
			driverClassName = props.getProperty( CONN_PREFIX + connect + DRIVER_SUFFIX  );
			
			// 获得目标数据库对应的URL
			URL = props.getProperty( CONN_PREFIX + connect + URL_SUFFIX );
			
			// 获得数据库连接用户名
			username = props.getProperty( CONN_PREFIX + connect + USER_SUFFIX );
			
			// 获得数据库连接密码
			password = props.getProperty( CONN_PREFIX + connect + PASSWD_SUFFIX );
			
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	// 1、加载驱动
	private static boolean load(){
		try {
			Class.forName( driverClassName );
			return true ;
		} catch (ClassNotFoundException e) {
			System.out.println( "驱动类 " + driverClassName + " 加载失败"  );
		}
		
		return false ;
	}
	
	/** 专门检查 缓存的 那个 连接是否 【不可以】被使用 */
	private static boolean invalid(){
		if( conn != null ){
			try {
				if( conn.isClosed() || !conn.isValid( 3 ) ){
					// 如过不可以被使用，返回 true
					return true ;
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
			// conn 既不是 null 且也没有关闭 ，且 isValid 返回 true，说明是可以使用的 ( 返回 false )
			return false ;
		} else {
			// conn 是 null ，不可用，返回 true
			return true ;
		}
	}
	
	// 2、建立连接
	public static Connection connect(){
		if( invalid() ){ // 如果连接是无效的
			// 加载驱动
			load();
			try {
				// 建立连接
				conn = DriverManager.getConnection(URL, username ,  password ) ;
			} catch (SQLException e) {
				System.out.println( "建立 " + connect + " 数据库连接失败 , " + e.getMessage() );
			}
		}
		return conn ;
	}
	
	// 3、设置是否自动提交事务、设置事务的隔离级别
	public static void transaction(){
		
		connect(); 
		
		try {
			conn.setAutoCommit( autoCommit );
		} catch (SQLException e) {
			System.out.println( "设置事务的提交方式为 : " + ( autoCommit ? "自动" : "非自动" ) + " 时失败 , " + e.getMessage()  );
		}
		
		try {
			conn.setTransactionIsolation( isolation );
		} catch (SQLException e) {
			System.out.println( "设置事务的隔离级别时发生错误，" + e.getMessage()  );
		}
		
	}
	
	// 4、货车 : Statement 、PreparedStatement
	public static Statement statement(){
		Statement st = null ;
		connect(); // 如果连接是无效的就重新连接
		
		try {
			st = conn.createStatement();
		} catch (SQLException e) {
			System.out.println( "创建 Statement 对象失败 , " + e.getMessage() );
		}
		
		return st ;
	}
	
	// 4、货车 : Statement 、PreparedStatement
	public static PreparedStatement prepare( String SQL , boolean autoGeneratedKeys ) {
		
		PreparedStatement ps = null ;
		connect(); 
		
		try {
			if( autoGeneratedKeys ) { 
				ps = conn.prepareStatement( SQL , Statement.RETURN_GENERATED_KEYS );
			} else {
				ps = conn.prepareStatement( SQL );
			}
		} catch (SQLException e) {
			System.out.println( "创建 PreparedStatement 对象失败, " + e.getMessage() );
		}
		
		return ps ;
		
	}
	
	/** 5、执行 SQL : 查询 */
	public static ResultSet query( String SQL , Object... params ) {
		
		if( SQL == null || SQL.trim().isEmpty() || !SQL.trim().toLowerCase().startsWith( "select" ) ){
			throw new RuntimeException( "你的SQL语句为空或不是查询语句" );
		}
		
		ResultSet rs = null ;
		
		if( params.length > 0 ){ // 说明 有参数 传入，就需要处理参数
			// select * from students where id = ? and name = ?
			PreparedStatement ps = prepare( SQL , false );
			
			try{ 
				for( int i = 0 ; i < params.length ; i++ ){
					ps.setObject( i + 1 ,  params[ i ] );
				}
				
				rs = ps.executeQuery();
			} catch (SQLException e) {
				System.out.println( "执行SQL失败: " + e.getMessage() );
			}
			
		} else { // 说明没有传入任何参数，即 params.length 是 0 ( 不可能是 负数 )
			// select * from students 
			Statement st = statement();
			try {
				rs = st.executeQuery( SQL ) ; // 直接执行不带参数的 SQL 语句
			} catch (SQLException e) {
				System.out.println( "执行SQL失败: " + e.getMessage() );
			} 
		}
		
		return rs ;
		
	}
	
	private static Object typeof( Object o ) {
		Object r = o  ;
		
		// 将 java.util.Date 转成 java.sql.Date
		if( o instanceof java.util.Date ){
			java.util.Date d = (java.util.Date) o ;
			r = new java.sql.Date( d.getTime() );
		}
		
		// 将 Character 或 char 变成 String
		if( o instanceof Character || o.getClass() == char.class ){
			r = String.valueOf( o );
		}
		
		return r ;
	}
	
	/** 5、执行 SQL : DDL 或 DML */
	public static boolean execute ( String SQL , Object... params ) {
		
		if( SQL == null || SQL.trim().isEmpty() || SQL.trim().toLowerCase().startsWith( "select" ) ){
			throw new RuntimeException( "你的SQL语句为空 或 不是 DDL 、DML 语句" );
		}
		
		boolean r = false ; // 表示 执行 DDL 或 DML 操作是否成功的一个标识变量
		
		// 获得 被执行的 SQL 语句的 前缀 ( 第一个单词 )
		SQL = SQL.trim();
		SQL = SQL.toLowerCase();
		String prefix = SQL.substring( 0 ,  SQL.indexOf( " " ) );
		
		String operation = "" ; // 用来保存操作类型的 变量
		
		// 根据前缀 确定操作
		switch ( prefix ) {
			case "create" :   operation = "创建表" ;    break ; 
			case "alter" :      operation = "修改表结构" ;  break ; 
			case "drop" :      operation = "删除表" ;  break ; 
			case "truncate" :  operation = "截断表" ;  break ; 
	
			case "insert" :  operation = "插入数据" ;   break ; 
			case "update" : operation = "更新数据" ;  break ; 
			case "delete" :  operation = "删除数据" ;  break ; 
		}
		 
		if( params.length > 0 ){ // 说明有参数
			PreparedStatement ps = prepare( SQL , false );
			
			Connection c = null ;
			try {
				c = ps.getConnection(); // 从 PreparedStatement 对象中获得 它对应的连接对象
			} catch (SQLException e) {
				e.printStackTrace();
			} 
			
			try {
				
				for( int i = 0 ; i < params.length ; i++ ){
					Object p = params[ i ] ;
					p = typeof( p ) ;
					ps.setObject( i + 1 , p );
				}
				
				ps.executeUpdate();
				commit( c );
				r = true ;
			} catch (SQLException e) {
				System.out.println( operation + " 失败: " + e.getMessage()  );
				rollback( c );
			}
			 
		} else { // 说明没有参数
			
			Statement st = statement();
			Connection c = null ;
			try {
				c = st.getConnection(); // 从 Statement 对象中获得 它对应的连接对象
			} catch (SQLException e) {
				e.printStackTrace();
			} 
			// 执行 DDL 或 DML 语句，并返回执行结果
			try {
				st.executeUpdate( SQL );
				commit(c); // 提交事务
				r = true ;
			} catch (SQLException e) {
				System.out.println( operation + " 失败: " + e.getMessage()  );
				rollback(c); // 回滚事务
			}
			
		}
		
		
		return r ;
	}
	
	// 6、处理事务 : 提交 或 回滚事务
	private static void commit( Connection c ){
		if( c != null  &&  !autoCommit ){
			try {
				c.commit();
			} catch (SQLException e) {
				e.printStackTrace();
			} 
		}
	}
	
	private static void rollback( Connection c ){
		if( c != null  &&  !autoCommit ){
			try {
				c.rollback();
			} catch (SQLException e) {
				e.printStackTrace();
			} 
		}
	}
	
	/** 专门处理结果集的集合 */
	public static void show( ResultSet rs ) {
		
		if( rs != null ){
			
			try {
				ResultSetMetaData rsmd = rs.getMetaData(); // 结果集元数据
				final int columnCount = rsmd.getColumnCount() ;// 列数
				
				// 表头: 输出结果集中的 各个列名
				for( int i = 1 ; i <= columnCount ; i++ ){
					System.out.print( rsmd.getColumnLabel( i) + "\t\t");
				}
				System.out.println();
				
				// 数据: 将结果集中的数据以此输出
				while( rs.next() ) {
					
					for( int i = 1 ; i <= columnCount ; i++ ){
						System.out.print( rs.getObject( i ) + "\t\t");
					}
					System.out.println();
					
				}
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
			
		}
		
	}
	
	// 7、释放资源
	public static void release( Object cloaseable ) {
		
		if( cloaseable != null ){
			
			if( cloaseable instanceof ResultSet ){
				ResultSet rs = (ResultSet) cloaseable ;
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			
			if( cloaseable instanceof Statement ){
				Statement st = (Statement) cloaseable ;
				try {
					st.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			} 
			
			if( cloaseable instanceof Connection ){
				Connection c = (Connection) cloaseable ;
				try {
					c.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			
		}
		
	}

}
